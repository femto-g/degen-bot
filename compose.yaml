# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  app:
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - 3000:3000
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.
      # cache:
      #   condition: service_healthy
    # env_file:
    #   - ./backend/compose.env
    develop:
      watch:
        - action: sync
          path: .
          target: /home/app/
          ignore:
            - ./node_modules
            # - ./prisma
        - action: rebuild
          path: ./package.json
          target: /home/app/package.json
    # volumes:
    #   - type: bind
    #     source: ./prisma
    #     target: /home/app/prisma
    # # stdin_open: true
    # tty: true

  cache:
    image: redis:alpine
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    secrets:
      - redis-password
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis-password
    command: sh -c "redis-server --requirepass \"$(cat $${REDIS_PASSWORD_FILE})\""
    # env_file:
    #   - .env.
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    # volumes:
    #   - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

secrets:
  db-password:
    file: secrets/db-password.txt
  redis-password:
    file: secrets/redis-password.txt

volumes:
  postgres_data:
    # driver: local
  redis_data:
